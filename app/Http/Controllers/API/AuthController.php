<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\User;
use Auth;
use Illuminate\Http\Request;
use JWTAuth;


class AuthController extends Controller
{
        /**
        * Create a new controller instance.
        *
        * @return void
        */
        public function __construct()
        {
            // Based on the workflow you need, you may update and customize the following lines.

        }

        /**
         * [login Authenticate valid user and generate token]
         * @param  LoginUserAPIRequest $request [Checks for validation of user input data]
         * @return [json]                       [JWT token generated by the JWTAuth]
         */
        public function login(Request $request)
        {

            $credentials = $request->only('email', 'password');

            
            try {
            // verify the credentials and create a token for the user
                if (! $token = JWTAuth::attempt($credentials)) {
                    //return $this->sendError('Invalid credentials', 401);
                   return response()->json(['error' => 'Invalid Credentials.'], 401);
                }
            } catch (\JWTException $e) {
                return response()->json(['error' => 'Could Not create token.'], 500);
            }

            $user = Auth::user();
            $user['token'] = $token;
            return response()->json($user,201);
        }

        /**
         * [refreshToken Check for valid token and send refresh token on successful validation]
         * @return [token] [Refresh token response]
         */
        public function refreshToken(){
          
            try {
                $token = JWTAuth::parseToken()->refresh();
            } catch (Tymon\JWTAuth\Exceptions\TokenExpiredException $e) {

                return response()->json(['token_expired'], $e->getStatusCode());

            } catch (Tymon\JWTAuth\Exceptions\TokenInvalidException $e) {

                return response()->json(['token_invalid'], $e->getStatusCode());

            } catch (Tymon\JWTAuth\Exceptions\JWTException $e) {

                return response()->json(['token_absent'], $e->getStatusCode());

            }

            return $this->sendResponse(compact('token'),'Token refresh Successful');
    }

}
